#!/usr/bin/env ruby

bochs = File.join([File.dirname(__FILE__), '../src/bochs'])
ia_opcodes = File.join([bochs, 'ia_opcodes.h'])
unless File.exist?(ia_opcodes)
  STDERR.puts("#{ia_opcodes} not found");
  exit(1)
end

defined_funcs = [
                 'funcs.cc',
                 'arith8.cc',
                 'arith32.cc',
                 'arith64.cc',
                 'bit.cc',
                 'bit32.cc',
                 'bit64.cc',
                 'data_xfer8.cc',
                 'data_xfer16.cc',
                 'data_xfer32.cc',
                 'data_xfer64.cc',
                 'load.cc',
                 'logical8.cc',
                 'logical16.cc',
                 'logical32.cc',
                 'logical64.cc',
                 'mult32.cc',
                 'mult64.cc',
                 'shift8.cc',
                 'shift32.cc',
                 'shift64.cc',
                 'sse.cc',
                ].map{|n| File.join([bochs, n])}
defined_funcs.each do |p|
  unless File.exist?(p)
    STDERR.puts("#{p} not found");
    exit(1)
  end
end

def func_body(name)
  return <<-EOS
BX_INSF_TYPE BX_CPP_AttrRegparmN(1) #{name}(bxInstruction_c *i) {
  fprintf(stderr, "unsupported instruction #{name}: rip = %lx\\n", RIP);
  assert(false);
}
  EOS
end

funcs = {}
body = []
defined_funcs.each do |p|
  File.read(p).lines.each do |line|
    case line
    when /^BX_INSF_TYPE/
      raise line unless /(BX_CPU_C::\w+)\(/ =~ line
      funcs[$1] = true
    when /^SSE_/
      raise line unless /SSE_\w+\((\w+), \w+\)/ =~ line
      f = "BX_CPU_C::#{$1}"
      funcs[f] = true
    end
  end
end
File.read(ia_opcodes).lines.each do |line|
  unless line =~ /&BX_CPU_C/
    body << line
    next
  end
  dummy, fun1, fun2, rest = line.split(', ')
  raise fun1 unless fun1 =~ /&BX_CPU_C/ or fun1 =~ /NULL/
  raise fun2 unless fun2 =~ /&BX_CPU_C/ or fun2 =~ /NULL/
  [fun1, fun2].each do |fun|
    next if fun =~ /NULL/
    fun = fun.gsub('&', '')
    body << func_body(fun) unless funcs[fun]
    funcs[fun] = true
  end
end

puts <<-EOS
#include <stdio.h>
#{body.join()}
EOS
