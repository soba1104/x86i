#!/usr/bin/env ruby

bochs = File.join([File.dirname(__FILE__), '../src/bochs'])
ia_opcodes = File.join([bochs, 'ia_opcodes.h'])
unless File.exist?(ia_opcodes)
  STDERR.puts("#{ia_opcodes} not found");
  exit(1)
end

def func_body(name)
  return <<-EOS
BX_INSF_TYPE BX_CPP_AttrRegparmN(1) #{name}(bxInstruction_c *i) {
  fprintf(stderr, "unsupported instruction #{name}\\n");
  assert(false);
}
  EOS
end

funcs = {}
body = []
File.read(ia_opcodes).lines.each do |line|
  unless line =~ /&BX_CPU_C/
    body << line
    next
  end
  dummy, fun1, fun2, rest = line.split(', ')
  raise fun1 unless fun1 =~ /&BX_CPU_C/ or fun1 =~ /NULL/
  raise fun2 unless fun2 =~ /&BX_CPU_C/ or fun2 =~ /NULL/
  [fun1, fun2].each do |fun|
    next if fun =~ /NULL/
    fun = fun.gsub('&', '')
    body << func_body(fun) unless funcs[fun]
    funcs[fun] = true
  end
end

puts <<-EOS
#include <stdio.h>
#{body.join()}
EOS
